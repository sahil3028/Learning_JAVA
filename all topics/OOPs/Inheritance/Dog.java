package Inheritance;

public class Dog extends Animal {

    private String earShape;
    private String tailShape;

    //super() is same as this()(used in constructor chaining, to call another constructor,, also follows the same rule)
    //it is used to call the constructor of the parent class
    //so here, whenever an obj with no arguments will be created using super it will initialize the parent constructor with some values
    //
    public Dog() {
        super("Mutt", "Big", 50);
    }

    //constructor chaining
    public Dog(String type, double weight) {
        this(type, weight, "Perky", "Curled");
    }


    //here in the super() ternary operator is used great example to use super and this
    public Dog(String type, double weight, String earShape, String tailShape) {
        super(type, weight <  15 ? "small" : (weight < 35 ? "medium" : "large"), weight);
        this.earShape = earShape;
        this.tailShape = tailShape;
    }


    //here java will automatically add super.toString() this will call the parent classes tostring method too
    @Override
    public String toString() {
        return "Dog{" +
                "earShape='" + earShape + '\'' +
                ", tailShape='" + tailShape + '\'' +
                "} " + super.toString();
    }

    //here we have overridden the makeNoise method so when a dog obj will acess makenoise it will acess this one
    public void makeNoise() {

        if (type == "Wolf") {
            System.out.print("Ow Wooooo! ");
        }
        bark();
        System.out.println();
    }

    //here is an overriden  method generated by intellij...
    //it will automatically include super(calling the method in the parent class) so it will kind of useless
    //coz even without all of that it would have acedded the parent method.. but it will allow us to add more lines or functionality
    @Override
    public void move(String speed) {
        super.move(speed);
//        System.out.println("Dogs walk, run and wag their tail");
        if (speed == "slow") {
            walk();
            wagTail();
        } else {
            run();
            bark();
        }
        System.out.println();
    }

    private void bark() {
        System.out.print("Woof! ");
    }

    private void run() {
        System.out.print("Dog Running ");
    }

    private void walk() {
        System.out.print("Dog Walking ");
    }

    private void wagTail() {
        System.out.print("Tail Wagging ");
    }
}
